{"version":3,"file":"one.js","sourceRoot":"","sources":["../../../src/Dayz/One/one.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,mDAAqC;AACrC,gDAAwB;AAExB,iDAAiD;AACjD,SAAsB,cAAc;;QAClC,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,EAAE;YACvE,QAAQ,EAAE,MAAM;SACjB,CAAC,CAAC;QACH,MAAM,EAAE,GAAG,QAAQ,CAAC,eAAe,CAAC;YAClC,KAAK,EAAE,MAAM;YACb,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;QACH,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,IAAI,GAAe,EAAE,CAAC;YAC5B,IAAI,GAAG,GAAa,EAAE,CAAC;YACvB,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrB,IAAI,IAAI,KAAK,EAAE,EAAE;oBACf,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACf,GAAG,GAAG,EAAE,CAAC;iBACV;qBAAM;oBACL,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;iBAC9B;YACH,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAtBD,wCAsBC;AAED,SAAgB,kBAAkB,CAAC,OAAmB;IACpD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE,CAAC,WAAW,GAAG,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;AACpH,CAAC;AAFD,gDAEC;AAED,SAAsB,GAAG;;QACvB,MAAM,IAAI,GAAG,MAAM,cAAc,EAAE,CAAC;QACpC,MAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;QAC1B,qBAAqB;IACvB,CAAC;CAAA;AALD,kBAKC","sourcesContent":["import * as fs from 'fs';\r\nimport * as readline from 'readline';\r\nimport path from 'path';\r\n\r\n// A Generator function that returns line of file\r\nexport async function extractElfData(): Promise<Array<Array<number>>> {\r\n  const stream = fs.createReadStream(path.resolve(__dirname, 'input.txt'), {\r\n    encoding: 'utf8',\r\n  });\r\n  const rl = readline.createInterface({\r\n    input: stream,\r\n    crlfDelay: Infinity,\r\n  });\r\n  return new Promise((resolve, reject) => {\r\n    stream.once('error', (_) => reject(new Error(`Error in stream`)));\r\n    const data: number[][] = [];\r\n    let elf: number[] = [];\r\n    rl.on('line', (line) => {\r\n      if (line === ``) {\r\n        data.push(elf);\r\n        elf = [];\r\n      } else {\r\n        elf.push(parseInt(line, 10));\r\n      }\r\n    });\r\n    rl.on('close', () => resolve(data));\r\n  });\r\n}\r\n\r\nexport function computeTotalCalory(elfData: number[][]) {\r\n  return elfData.map((elfCalory) => elfCalory.reduce((accumulator, currentValue) => accumulator + currentValue, 0));\r\n}\r\n\r\nexport async function run() {\r\n  const data = await extractElfData();\r\n  const total = computeTotalCalory(data);\r\n  return Math.max(...total);\r\n  // console.log(data);\r\n}\r\n"]}